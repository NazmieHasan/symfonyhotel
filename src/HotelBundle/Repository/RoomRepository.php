<?php

namespace HotelBundle\Repository;

use HotelBundle\Entity\Room;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\OptimisticLockException;

/**
 * RoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoomRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em,
                                Mapping\ClassMetadata $metaData = null)
    {
        parent::__construct($em,
            $metaData == null ?
                new Mapping\ClassMetadata(Room::class) :
                $metaData);
    }

    /**
     * @param Room $room
     * @return bool
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function insert(Room $room)
    {
        $this->_em->persist($room);

        try {
            $this->_em->flush();
            return true;
        } catch (OptimisticLockException $e) {
            return false;
        }
    }


    /**
     * @param Room $room
     * @return bool
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function update(Room $room)
    {
        try {
            $this->_em->merge($room);
            $this->_em->flush();
            return true;
        } catch (OptimisticLockException $e) {
            return false;
        }
    }

    /**
     * @param Room $room
     * @return bool
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function remove(Room $room)
    {
        $this->_em->remove($room);
        try {
            $this->_em->flush();
            return true;
        } catch (OptimisticLockException $e) {
            return false;
        }
    }
    
    public function getAllByCheckinCheckout($checkin, $checkout)
    {  
        $roomIds = $this->_em->createQuery("
            SELECT 
                r
            FROM 
                HotelBundle:Room r
            LEFT JOIN 
                HotelBundle:Booking b
            WITH 
                b.roomId = r.id
            WHERE (
                (b.checkin = :checkin AND b.checkout = :checkout) OR 
                
                ( (b.checkin = :checkin ) AND (:checkout BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (:checkin BETWEEN b.checkin AND b.checkout) AND (:checkout BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (:checkin BETWEEN b.checkin AND b.checkout) AND (:checkout = b.checkout) ) OR
                
                ( (b.checkin BETWEEN :checkin AND :checkout) AND (:checkout BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (b.checkin BETWEEN :checkin AND :checkout) AND (b.checkout = :checkout) ) OR
                
                ( (b.checkout BETWEEN :checkin AND :checkout) AND (:checkin BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (b.checkin BETWEEN :checkin AND :checkout) AND (b.checkout BETWEEN :checkin AND :checkout) )
            ) 
            
        ")
        ->setParameter('checkin', $checkin)
        ->setParameter('checkout', $checkout)
        ->getResult(); 
               
       $removeRoomIds = implode(',',$roomIds);
       
       if ($removeRoomIds == null) {
           $removeRoomIds = '0';
       } 
    
        return $this->_em->createQuery("
            SELECT 
                r
            FROM 
                HotelBundle:Room r
            LEFT JOIN 
                HotelBundle:Booking b
            WITH 
                b.roomId = r.id
            WHERE  
                r.id NOT IN ($removeRoomIds)
            GROUP BY r.categoryId      
       ")
        ->getResult();          
    }
    
    public function getOneByCheckinCheckoutCategory($checkin, $checkout, $categoryId)
    {
        $roomIds = $this->_em->createQuery("
            SELECT 
                r
            FROM 
                HotelBundle:Room r
            LEFT JOIN 
                HotelBundle:Booking b
            WITH 
                b.roomId = r.id
            WHERE (
                (r.categoryId = :categoryId) AND
                
                (b.checkin = :checkin AND b.checkout = :checkout) OR 
                
                ( (b.checkin = :checkin ) AND (:checkout BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (:checkin BETWEEN b.checkin AND b.checkout) AND (:checkout BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (:checkin BETWEEN b.checkin AND b.checkout) AND (:checkout = b.checkout) ) OR
                
                ( (b.checkin BETWEEN :checkin AND :checkout) AND (:checkout BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (b.checkin BETWEEN :checkin AND :checkout) AND (b.checkout = :checkout) ) OR
                
                ( (b.checkout BETWEEN :checkin AND :checkout) AND (:checkin BETWEEN b.checkin AND b.checkout) ) OR
                
                ( (b.checkin BETWEEN :checkin AND :checkout) AND (b.checkout BETWEEN :checkin AND :checkout) )
            )
        ")
        ->setParameter('checkin', $checkin)
        ->setParameter('checkout', $checkout)
        ->setParameter('categoryId', $categoryId)
        ->getResult(); 
               
       $removeRoomIds = implode(',',$roomIds);
       
       if ($removeRoomIds == null) {
           $removeRoomIds = '0';
       } 
    
        return $this->_em->createQuery("
            SELECT 
                r
            FROM 
                HotelBundle:Room r
            LEFT JOIN 
                HotelBundle:Booking b
            WITH 
                b.roomId = r.id
            WHERE 
                r.categoryId = $categoryId AND
                r.id NOT IN ($removeRoomIds)    
       ")
        ->setMaxResults(1)
        ->getResult();     
    }
   
}
